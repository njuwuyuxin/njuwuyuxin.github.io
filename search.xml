<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git快速上手]]></title>
    <url>%2F2019%2F04%2F18%2Fgit%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%2F</url>
    <content type="text"><![CDATA[前言git作为一个先进的版本管理工具，已经被广泛应用在大量项目中。近来发现了一个非常不错的git学习网站，虽然比较基础，但是可视化的界面能够帮助新人快速理解git每项指令的功能，同时也可以一定程度上的查漏补缺。网站地址：https://learngitbranching.js.org/而本文也记录了一些常用的git指令和使用技巧 常用git指令新建仓库在当前目录初始化一个git仓库git init新建一个目录，初始化一个git仓库git init [projectName]用于从远程仓库进行克隆，一般可以选择通过https或者ssh方式git clone [url] 配置对于刚安装git的新人，一般需要配置邮箱和用户名，建议使用全局方式配置git conifg [--global] user.name &quot;[username]&quot;git conifg [--global] user.email &quot;[email]&quot;可以查看当前的git配置git config --list可以直接编辑git配置文件，之前通过命令行配置的在此也可以看到git config -e [--global] 增加、删除文件这里需要简单介绍一下git中工作区和暂存区的概念 工作区可以简单理解为你在当前仓库的种种改动，git可以检测到但是并未将之准备为下次提交的内容。需要用户将之添加到暂存区。 暂存区可以简单理解为，下次执行提交中会被提交上去的文件。 整个工作流为： 你修改了某个文件 -&gt; 该文件变为工作区文件 -&gt; 你添加该文件进入暂存区 -&gt; 提交暂存区文件，该文件被提交 添加指定文件到暂存区git add [file1] [file2] ...添加指定目录到暂存区（包含该目录下所有文件）git add [dir]添加当前目录下所有文件到暂存区git add .删除工作区文件，并将“删除”这个操作放入暂存区git rm [file1] [file2] ...停止追踪文件，但是该文件会保留在工作区，类似gitignore的作用git rm --cached [file]改名文件，并将“改名”这个操作放入暂存区git mv [origin-name] [target-name] 代码提交把暂存区内容提交到仓库， 最常用的提交指令git commit -m &quot;message&quot;提交暂存区中的指定文件到仓库git commit [file1] [file2] ... -m &quot;message&quot;直接将工作区自从上次commit之后的变化，提交到仓库（跳过暂存区）git commit -a使用一次新的commit，替代上一次提交,常用于简单修复如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message] 分支操作git中的分支是一个非常强大的功能，新建、删除、切换分支速度极快，可以多多使用 列出所有本地分支git branch列出所有远程分支git branch -r列出所有本地和远程分支git branch -a新建一个分支，并且留在当前分支git branch [branch-name]新建一个分支，并切换到新的分支上git checkout -b [branch-name]从某一个commit记录为起点，新建一个分支；其中commit中填入commit的hash或者tag（如果有标签）（下同）git branch [branch-name] [commit]新建一个分支，并于远程的一个分支建立追踪关系git branch --track [branch-name] [remote-branch]切换分支git checkout [branch-name]合并指定分支到当前分支git merge [branch-name]合并指定分支到当前分支，并生成线性的记录git rebase [branch-name]交互式的rebasegit rebase [branch] -i选择某一次提交（任意分支上的），合并到当前分支git cherry-pick [commit]删除分支git branch -d [branch-name]删除远程分支git branch -dr [origin/branch]git push origin --delete [branch-name] 标签标签可以用来给某一次提交添加一个可以追踪的标记，该标记不受分支影响，不会变化，可以在任何情况下被追踪。对于某一次重大提交，常常可以用标签予以标记（如某一次版本发布） 列出所有taggit tag在当前的commit上新建一个标签git tag [tag-name]给指定的commit上新建一个标签git tag [tag-name] [commit]删除本地的一个标签git tag -d [tag-name]删除远程的一个标签git push origin :refs/tags/[tag-name]查看某个标签对应的提交信息git show [tag-name]提交指定tag, remote指远程仓库的名字，一般为origingit push [remote] [tag]提交所有taggit push [remote] --tags以某个标签指定的commit为基点，新建一个分支git branch [branch-name] [tag-name] 查看信息显示有变更的文件git status显示当前分支的版本历史git log显示commit历史，以及每次commit发生变化的文件git log --stat显示指定文件的每一次改动git log -p [file]显示指定文件是什么时间被什么人修改的git blame [file]显示暂存区与工作区的差异git diff显示暂存区与上一次commit之间的差异 （可指定文件）git diff --cached [file]显示工作区与当前分支最新commit之间的差异git diff HEAD显示你今天写了多少行代码git diff --shortstat &quot;@{0 day ago}&quot;显示当前分支最近的几次提交记录（常用来进行恢复）git reflog 远程同步下载远程仓库的所有变动git fetch [remote]显示所有远程仓库git remote -v显示某个远程仓库的信息git remote show [remote]新增一个远程仓库，并命名git remote add [name] [url]拉取远程仓库的变化，并与本地分支合并git pull [remote] [branch]上传本地分支到远程仓库git push [remote] [branch]强行推送当前分支到远程仓库，即使有冲突git push [remote] --force推送所有分支到远程仓库git push [remote] --all 撤销恢复暂存区的指定文件到工作区git checkout [file]恢复某个commit的指定文件到暂存区与工作区git checkout [commit] [file]恢复暂存区的所有文件到工作区git checkout .重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file]重置工作区与暂存区，与上一次commit保持一致git reset --hard重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit]重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --hard [commit]新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支常用来对远程仓库进行恢复git revert [commit]暂时将未提交的变化移除，稍后再移入git stashgit stash pop 关于git reset指令，其实有 –soft –hard –mixed三种参数，默认为 –mixed参数。具体详细用法可以参考这篇文章 git reset详解 HEAD移动HEAD在git中是一个非常重要的概念，因此在这里把这部分单独列出来。HEAD是git中用来标记当前位置的一个指针。形象的说法就是：你现在在哪，HEAD就指向哪，因为HEAD，git才知道你在哪。 一般情况下，HEAD指向当前分支（上最近的提交），但是在有些时候，我们可以让HEAD指向某一次具体的提交，这也叫做分离HEAD。比如创建分支时，如果不指定commit，那么会在当前HEAD的位置创建分支。 移动HEAD的方法是使用checkout指令，指定一个commid的hash值进行绝对定位git checkout [commit-id]我们也可以使用相对定位，以当前HEAD或分支名等可以追踪位置的标记为基准。 ^代表当前位置的前一个提交git checkout HEAD^git checkout master^我们也可以用 ~[number] 来一次移动多次提交git checkout HEAD~3git checkout master~5 关于HEAD的更多用法可以进一步去搜集资料 后记以上仅仅为git 入门常用的一些指令，熟练之后可以应对一般git的使用场景。在这里依然十分推荐https://learngitbranching.js.org/进行实际操作一次，相信对git的使用有很大帮助。]]></content>
      <categories>
        <category>git学习</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>版本控制</tag>
        <tag>常用指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Hexo和Github pages快速搭建个人博客]]></title>
    <url>%2F2019%2F04%2F09%2F%E7%94%A8Hexo%E5%92%8CGithub%20pages%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[为什么要写博客一直以来都有想写博客的想法，但一方面又觉得自己没有什么技术积累，言之无物，另一方面又担心没有毅力能够坚持下去。终于还是决定先行动起来，即便是记录下日常学习的心得，踩过的坑，也或许对自己对他人有些微帮助 于是今天动手用hexo简单搭建了这样一个静态博客，搭建的过程也并不复杂，感兴趣的朋友可以参照下面步骤搭建一个自己的静态博客 开始搭建准备工作 首先hexo是基于Node.js实现的，因此我们想要用hexo搭建个人主页，首先要安装Node.js 对于windows用户，建议去官网下载安装包，安装时选择 add to path， 添加环境变量 对于mac用户 可以选择使用nvm进行安装，优点在于可以方便的控制node版本（对于搭建个人博客意义不大）$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh安装好nvm后执行nvm install stable安装最新稳定版node 安装好node后，为了将其发布在Github pages上，我们还需要安装git 对于windows用户，去官网下载 git，为了方便使用命令行，建议安装git bash 对于mac用户，可以用homebrew进行安装brew install git 安装hexo准备工作完成后，我们就可以安装Hexo了npm install -g hexo-cli-g 参数指定以全局方式安装 安装好hexo后，便可以在命令行使用hexo指令123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 其中folder为你想创建的文件夹路径，如果不指定folder，则默认会在当前文件夹创建（要求当前文件夹为空） 新建完成后，文件夹目录结构如下12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml为全局配置文件，可以配置网站的基础信息 scaffolds文件夹存放页面的模版信息 source文件夹中的_posts文件夹用来存放我们的博文 themes文件夹存放页面所使用的主题 配置网站到了这里，我们的网站已经初步成型了，为了看到我们网站的具体样子，我们可以执行hexo server在本地运行一个服务，默认4000端口，信息如下12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 看到这样的提示，代表已经成功运行了，打开浏览器输入 localhost:4000 即可看到我们的页面 但是此时的网站没有名称，作者等一系列信息，需要我们手动配置 打开根目录下的_config.yml 如下123456789101112# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: subtitle:description:keywords:author: language: zh-Hanstimezone: 可以修改各个字段的值，如标题、作者、语言等等。可以给博客起一个喜欢的名字，并落上自己的署名 发布文章 博客配置好后，我们便可以开始书写文章了，用hexo创建一篇新文章也很简单 hexo new [layout] &lt;title&gt;layout不指定的话默认试用post的布局，默认布局可以在_config.yml中修改创建好文章后，我们就可以在source/_posts文件夹下找到并编写了，书写博文使用markdown 文章写好后，我们需要把markdown文件转换成静态的html文件以便显示在网页上，hexo为我们提供了一个简单的指令 hexo generate可以简写为hexo g 在生成好文章后，刷新我们本地打开的博客网站(localhost:4000)，可以看到我们的文章已经可以显示出来啦 部署网站至此我们的博客基本功能已经实现了，但是所有的操作都只能通过本地运行的服务进行查看。为了把博客放到互联网上供所有人浏览，我们还需要将我们的博客部署到服务器上。 一个令人兴奋的消息是，github为我们提供了这样一个静态网站托管的服务，并且完全免费！我们所需要做的，仅仅是拥有一个github账号，并且创建一个用于维护github page的仓库 首先在github上创建一个仓库，仓库名称为 yourName.github.io ，yourName需要替换成你的github昵称 如果想要通过ssh验证，需要先在本机生成ssh密钥，将公钥添加到github账户上 之后需要配置本地博客网站的部署配置，依然是在_config.yml中，在文件最下方找到deploy字段如下12deploy: type: 在type字段中填写 git之后在下一行新增一个字段 repo，填入你刚刚创建的git仓库地址，应该是如下形式123deploy: type: git repo: https://github.com/xxxx/xxx.github.io.git repo字段根据选择的不同协议，可以选择https或者ssh认证 一切都配置完毕后，我们就可以将网站部署到github page上去了！hexo deploy可以简写为 hexo d首次部署需要进行身份验证，如果采用https协议，需要输入github账号密码。如果采用ssh协议则不需要。 如果没有提示什么错误，稍等片刻，我们在浏览器输入与刚刚创建好的仓库的同名域名 xxx.github.io 即可以看到我们创建好的个人网站了！ 个性化域名如果想要为自己的网站设置一个个性化的域名，那么我们需要向域名供应商购买一个域名并且配置相应的dns服务，更多内容可以自行查阅，本文不再过多阐述。 相关阅读hexo官方文档github pages官方指南markdown语法简介]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>node</tag>
        <tag>指南</tag>
      </tags>
  </entry>
</search>
